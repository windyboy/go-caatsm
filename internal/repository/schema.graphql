schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "aviation.telegrams"
"""
type aviation_telegrams {
  body_and_footer: String
  body_data(
    """JSON select path"""
    path: String
  ): jsonb
  category: String
  date_time: String
  dispatched_at: timestamp
  message_id: String
  need_dispatch: Boolean
  originator: String
  originator_date_time: String
  parsed_at: timestamp
  primary_address: String
  priority_indicator: String
  received_at: timestamp!
  secondary_addresses: String
  text: String!
  uuid: uuid!
}

"""
aggregated selection of "aviation.telegrams"
"""
type aviation_telegrams_aggregate {
  aggregate: aviation_telegrams_aggregate_fields
  nodes: [aviation_telegrams!]!
}

"""
aggregate fields of "aviation.telegrams"
"""
type aviation_telegrams_aggregate_fields {
  count(columns: [aviation_telegrams_select_column!], distinct: Boolean): Int!
  max: aviation_telegrams_max_fields
  min: aviation_telegrams_min_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input aviation_telegrams_append_input {
  body_data: jsonb
}

"""
Boolean expression to filter rows from the table "aviation.telegrams". All fields are combined with a logical 'AND'.
"""
input aviation_telegrams_bool_exp {
  _and: [aviation_telegrams_bool_exp!]
  _not: aviation_telegrams_bool_exp
  _or: [aviation_telegrams_bool_exp!]
  body_and_footer: String_comparison_exp
  body_data: jsonb_comparison_exp
  category: String_comparison_exp
  date_time: String_comparison_exp
  dispatched_at: timestamp_comparison_exp
  message_id: String_comparison_exp
  need_dispatch: Boolean_comparison_exp
  originator: String_comparison_exp
  originator_date_time: String_comparison_exp
  parsed_at: timestamp_comparison_exp
  primary_address: String_comparison_exp
  priority_indicator: String_comparison_exp
  received_at: timestamp_comparison_exp
  secondary_addresses: String_comparison_exp
  text: String_comparison_exp
  uuid: uuid_comparison_exp
}

"""
unique or primary key constraints on table "aviation.telegrams"
"""
enum aviation_telegrams_constraint {
  """
  unique or primary key constraint on columns "uuid"
  """
  telegrams_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input aviation_telegrams_delete_at_path_input {
  body_data: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input aviation_telegrams_delete_elem_input {
  body_data: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input aviation_telegrams_delete_key_input {
  body_data: String
}

"""
input type for inserting data into table "aviation.telegrams"
"""
input aviation_telegrams_insert_input {
  body_and_footer: String
  body_data: jsonb
  category: String
  date_time: String
  dispatched_at: timestamp
  message_id: String
  need_dispatch: Boolean
  originator: String
  originator_date_time: String
  parsed_at: timestamp
  primary_address: String
  priority_indicator: String
  received_at: timestamp
  secondary_addresses: String
  text: String
  uuid: uuid
}

"""aggregate max on columns"""
type aviation_telegrams_max_fields {
  body_and_footer: String
  category: String
  date_time: String
  dispatched_at: timestamp
  message_id: String
  originator: String
  originator_date_time: String
  parsed_at: timestamp
  primary_address: String
  priority_indicator: String
  received_at: timestamp
  secondary_addresses: String
  text: String
  uuid: uuid
}

"""aggregate min on columns"""
type aviation_telegrams_min_fields {
  body_and_footer: String
  category: String
  date_time: String
  dispatched_at: timestamp
  message_id: String
  originator: String
  originator_date_time: String
  parsed_at: timestamp
  primary_address: String
  priority_indicator: String
  received_at: timestamp
  secondary_addresses: String
  text: String
  uuid: uuid
}

"""
response of any mutation on the table "aviation.telegrams"
"""
type aviation_telegrams_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [aviation_telegrams!]!
}

"""
on_conflict condition type for table "aviation.telegrams"
"""
input aviation_telegrams_on_conflict {
  constraint: aviation_telegrams_constraint!
  update_columns: [aviation_telegrams_update_column!]! = []
  where: aviation_telegrams_bool_exp
}

"""Ordering options when selecting data from "aviation.telegrams"."""
input aviation_telegrams_order_by {
  body_and_footer: order_by
  body_data: order_by
  category: order_by
  date_time: order_by
  dispatched_at: order_by
  message_id: order_by
  need_dispatch: order_by
  originator: order_by
  originator_date_time: order_by
  parsed_at: order_by
  primary_address: order_by
  priority_indicator: order_by
  received_at: order_by
  secondary_addresses: order_by
  text: order_by
  uuid: order_by
}

"""primary key columns input for table: aviation.telegrams"""
input aviation_telegrams_pk_columns_input {
  uuid: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input aviation_telegrams_prepend_input {
  body_data: jsonb
}

"""
select columns of table "aviation.telegrams"
"""
enum aviation_telegrams_select_column {
  """column name"""
  body_and_footer

  """column name"""
  body_data

  """column name"""
  category

  """column name"""
  date_time

  """column name"""
  dispatched_at

  """column name"""
  message_id

  """column name"""
  need_dispatch

  """column name"""
  originator

  """column name"""
  originator_date_time

  """column name"""
  parsed_at

  """column name"""
  primary_address

  """column name"""
  priority_indicator

  """column name"""
  received_at

  """column name"""
  secondary_addresses

  """column name"""
  text

  """column name"""
  uuid
}

"""
input type for updating data in table "aviation.telegrams"
"""
input aviation_telegrams_set_input {
  body_and_footer: String
  body_data: jsonb
  category: String
  date_time: String
  dispatched_at: timestamp
  message_id: String
  need_dispatch: Boolean
  originator: String
  originator_date_time: String
  parsed_at: timestamp
  primary_address: String
  priority_indicator: String
  received_at: timestamp
  secondary_addresses: String
  text: String
  uuid: uuid
}

"""
Streaming cursor of the table "aviation_telegrams"
"""
input aviation_telegrams_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: aviation_telegrams_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input aviation_telegrams_stream_cursor_value_input {
  body_and_footer: String
  body_data: jsonb
  category: String
  date_time: String
  dispatched_at: timestamp
  message_id: String
  need_dispatch: Boolean
  originator: String
  originator_date_time: String
  parsed_at: timestamp
  primary_address: String
  priority_indicator: String
  received_at: timestamp
  secondary_addresses: String
  text: String
  uuid: uuid
}

"""
update columns of table "aviation.telegrams"
"""
enum aviation_telegrams_update_column {
  """column name"""
  body_and_footer

  """column name"""
  body_data

  """column name"""
  category

  """column name"""
  date_time

  """column name"""
  dispatched_at

  """column name"""
  message_id

  """column name"""
  need_dispatch

  """column name"""
  originator

  """column name"""
  originator_date_time

  """column name"""
  parsed_at

  """column name"""
  primary_address

  """column name"""
  priority_indicator

  """column name"""
  received_at

  """column name"""
  secondary_addresses

  """column name"""
  text

  """column name"""
  uuid
}

input aviation_telegrams_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: aviation_telegrams_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: aviation_telegrams_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: aviation_telegrams_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: aviation_telegrams_delete_key_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: aviation_telegrams_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: aviation_telegrams_set_input

  """filter the rows which have to be updated"""
  where: aviation_telegrams_bool_exp!
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

scalar jsonb

input jsonb_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  _cast: jsonb_cast_exp

  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "aviation.telegrams"
  """
  delete_aviation_telegrams(
    """filter the rows which have to be deleted"""
    where: aviation_telegrams_bool_exp!
  ): aviation_telegrams_mutation_response

  """
  delete single row from the table: "aviation.telegrams"
  """
  delete_aviation_telegrams_by_pk(uuid: uuid!): aviation_telegrams

  """
  insert data into the table: "aviation.telegrams"
  """
  insert_aviation_telegrams(
    """the rows to be inserted"""
    objects: [aviation_telegrams_insert_input!]!

    """upsert condition"""
    on_conflict: aviation_telegrams_on_conflict
  ): aviation_telegrams_mutation_response

  """
  insert a single row into the table: "aviation.telegrams"
  """
  insert_aviation_telegrams_one(
    """the row to be inserted"""
    object: aviation_telegrams_insert_input!

    """upsert condition"""
    on_conflict: aviation_telegrams_on_conflict
  ): aviation_telegrams

  """
  update data of the table: "aviation.telegrams"
  """
  update_aviation_telegrams(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: aviation_telegrams_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: aviation_telegrams_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: aviation_telegrams_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: aviation_telegrams_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: aviation_telegrams_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: aviation_telegrams_set_input

    """filter the rows which have to be updated"""
    where: aviation_telegrams_bool_exp!
  ): aviation_telegrams_mutation_response

  """
  update single row of the table: "aviation.telegrams"
  """
  update_aviation_telegrams_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: aviation_telegrams_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: aviation_telegrams_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: aviation_telegrams_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: aviation_telegrams_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: aviation_telegrams_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: aviation_telegrams_set_input
    pk_columns: aviation_telegrams_pk_columns_input!
  ): aviation_telegrams

  """
  update multiples rows of table: "aviation.telegrams"
  """
  update_aviation_telegrams_many(
    """updates to execute, in order"""
    updates: [aviation_telegrams_updates!]!
  ): [aviation_telegrams_mutation_response]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "aviation.telegrams"
  """
  aviation_telegrams(
    """distinct select on columns"""
    distinct_on: [aviation_telegrams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [aviation_telegrams_order_by!]

    """filter the rows returned"""
    where: aviation_telegrams_bool_exp
  ): [aviation_telegrams!]!

  """
  fetch aggregated fields from the table: "aviation.telegrams"
  """
  aviation_telegrams_aggregate(
    """distinct select on columns"""
    distinct_on: [aviation_telegrams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [aviation_telegrams_order_by!]

    """filter the rows returned"""
    where: aviation_telegrams_bool_exp
  ): aviation_telegrams_aggregate!

  """
  fetch data from the table: "aviation.telegrams" using primary key columns
  """
  aviation_telegrams_by_pk(uuid: uuid!): aviation_telegrams
}

type subscription_root {
  """
  fetch data from the table: "aviation.telegrams"
  """
  aviation_telegrams(
    """distinct select on columns"""
    distinct_on: [aviation_telegrams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [aviation_telegrams_order_by!]

    """filter the rows returned"""
    where: aviation_telegrams_bool_exp
  ): [aviation_telegrams!]!

  """
  fetch aggregated fields from the table: "aviation.telegrams"
  """
  aviation_telegrams_aggregate(
    """distinct select on columns"""
    distinct_on: [aviation_telegrams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [aviation_telegrams_order_by!]

    """filter the rows returned"""
    where: aviation_telegrams_bool_exp
  ): aviation_telegrams_aggregate!

  """
  fetch data from the table: "aviation.telegrams" using primary key columns
  """
  aviation_telegrams_by_pk(uuid: uuid!): aviation_telegrams

  """
  fetch data from the table in a streaming manner: "aviation.telegrams"
  """
  aviation_telegrams_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [aviation_telegrams_stream_cursor_input]!

    """filter the rows returned"""
    where: aviation_telegrams_bool_exp
  ): [aviation_telegrams!]!
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

